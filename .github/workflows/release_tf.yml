name: Release TF

# Controls when the action will run.
on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Setup node version
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # Using yarn cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Install dependencies
      - name: Install dependencies
        run: yarn

      # Run tests
      - name: Run Tests
        run: yarn test:cov

      # coveralls
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Get version from package.json
      - name: Extract package version
        uses: nyaa8/package-version@v1.0.3

      # Show version
      - name: Print package version
        run: echo ${{ env.PACKAGE_VERSION }}

      # Configure AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Upload a docker image to AWS ECR
      - name: Upload image to AWS ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.ECR_REGISTRY }}
          cache_from: ${{ secrets.ECR_CACHE }}
          repo: podcasts-api
          tags: latest,${{ env.PACKAGE_VERSION }}
          
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
      
      - name: Apply infra with Terraform
        # run: terraform init && terraform destroy -auto-approve
        run: terraform init && terraform apply -var="image_tag=${{ env.PACKAGE_VERSION }}" -auto-approve
